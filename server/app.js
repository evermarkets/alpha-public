const debug = require('debug')('server:app');
const path = require('path');
const cors = require('cors');
const favicon = require('serve-favicon');
// const cookieParser = require('cookie-parser');
const compress = require('compression');
const config = require('config');

const feathers = require('@feathersjs/feathers');
const express = require('@feathersjs/express');
const socketio = require('@feathersjs/socketio');

const logger = require('./utils/loggerProduction');
const middleware = require('./middleware');
const services = require('./services');
const channels = require('./channels');
const sequelize = require('./helpers/sequelize');

// Print nice tracebacks on unhandled rejections (which we should eventually eliminate)
process.on('unhandledRejection', (r) => {
  console.log(r);
});

const app = express(feathers())
  // We don't use feathers-configuration because 'config' is a better alternative.
  // You don't have to pass app along for app.get() with 'config' and 'config' has more features.
  // Feathersjs will switch to 'config' at some point,
  // see https://github.com/feathersjs/feathers-configuration/issues/8

  // Log all REST requests
  .use(logger.setMorgan())

  // General setup
  .use(cors())
  .use(favicon(path.join(config.server.publicPath, 'favicon.png')))
  // .use(cookieParser())
  .use(express.json())
  .use(express.urlencoded({ extended: true }))

  // Load app
  .get('/', serveHtmlForEnvironment) // for '/' only

  // Serve static files
  .use('/', express.static('public'))
  .use('/', express.static('public/dist')) // assets generated by webpack

  // Routing for app. Load app; the client will handle rest of the routing.
  .use(config.client.defaultRoute, serveHtmlForEnvironment) // default is '/app ...'

  // Utilities
  .use(compress())

  // Feathers setup with REST and socketio support
  .configure(sequelize)
  .configure(express.rest())
  .configure(socketio())
  .configure(services)
  .configure(middleware)
  .configure(channels) // send real-time events to all clients

  // Use a Feathers friendly Express error handler
  .use(express.errorHandler());

module.exports = app;

// Helpers

function serveHtmlForEnvironment(req, res) {
  var html; // eslint-disable-line no-var

  switch (config.NODE_ENV) {
    case 'devserver':
      html = './index-devserver.html';
      break;
    case 'production': // fall through
    case 'development': // fall through
    default:
      html = path.join('.', 'dist', 'index.html');
  }

  debug(`Serve file ${html} in ${config.NODE_ENV}`);
  res.sendFile(html, { root: config.server.publicPath });
}
